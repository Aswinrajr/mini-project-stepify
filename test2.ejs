// const pdf = async (req, res) => {
    //     try {
    //         const orderId = req.query.id;
    //         const userDetails = await User.findOne({ email: req.session.user_id });
    //         const orderData = await Order.findOne({ _id: orderId });
    
    //         console.group("UserDetails: ",userDetails)
    //         console.log("orderData: ",orderData)
    
    //         const orderProducts = order.map(items => items.proCartDetail).flat();
    //         const cartProducts = order.map(items => items.cartProduct).flat();
    //         for (let i = 0; i < orderProducts.length; i++) {
    //             const orderProductId = orderProducts[i]._id;
    //             const matchingCartProduct = cartProducts.find(cartProduct => cartProduct.productId.toString() === orderProductId.toString());
    
    //             if (matchingCartProduct) {
    //                 orderProducts[i].cartProduct = matchingCartProduct;
    //             }
    //         }
    //         const address = userDetails.address.find(items => items._id.toString() == order.map(items => items.address).toString());
    //         const subTotal = cartProducts.reduce((totals, items) => totals + items.realPrice, 0);
    //         const [orderCanceld] = order.map(item => item.orderCancleRequest);
    //         const orderStatus = order.map(item => item.status);
    
    //         const invoiceBuffer = await generateInvoice(order, orderProducts, subTotal, address, orderCanceld, orderStatus);
    //         res.setHeader('Content-Type', 'application/pdf');
    //         res.setHeader('Content-Disposition', 'attachment; filename=invoice.pdf');
    //         res.send(invoiceBuffer);
    //     } catch (error) {
    //         console.log(error);
    //         res.status(500).send('Internal Server Error');
    //     }
    // };

    // const orderInvoice = async (req, res) => {
        //     const id = req.query.id;
        //     try {
        //         const userData = await User.findOne({email:req.session.user_id})
        //         console.log("Id in Invoice: ",id)
        //         // //find order details
        //         const orderData = await Order.findById(id);
        //         console.log("orderData >>", orderData)
        
        //         // // Generate the PDF
        //         const doc = new PDFDocument();
        //         doc.pipe(fs.createWriteStream('invoice.pdf'));
        
        //         // // Add content to the PDF
        
        //         doc.fontSize(15).text('Stepify ', { align: 'center' });
        //         doc.fontSize(12).text('Invoice ', { align: 'center' });
        //         doc.text('--------------------------');
        
        //         doc.text(`Order Id: ${orderData._id}`,{ align: 'start' });
        //         doc.text(`Order Date: ${orderData.createdAt.toISOString().split('T')[0]}`,{ align: 'end' });
        //         doc.text('--------------------------');
        
        //         doc.text(`Name: ${userData.firstName}`);
        //         doc.text(`Phone: ${orderData.userMobile}`);
        //         doc.text(`Deleivery Address: ${orderData.deliveryAddress}`);
        
        //         orderData.items.forEach((document) => {
        //             doc.text(`Product: ${document.ProductId}`);
        
        //             doc.text(`Quantity: ${document.quantity}`);
        //             doc.text(`Amount: ${document.price}`);
        //             doc.text('--------------------------\n');
        
        
        //             doc.text(`Total Amount : ${document.quantity *document.price }`);
        //             // doc.text(`Payable Amount: ${orderData.payment.amount}`);
        //             doc.text('--------------------------');
        //         });
        
        //         // // Stream the PDF to the response
        //         const filename = 'Invoice.pdf';
        //         res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
        //         res.setHeader('Content-Type', 'application/pdf');
        //         doc.pipe(res);
        //         doc.end();
        
        
        //     } catch (err) {
        //         console.log("in invoice >> ", err.message)
        //     }
        
        // }
        
        // const orderInvoice = async (req, res) => {
        //     const id = req.query.id;
        //     try {
        //         const userData = await User.findOne({ email: req.session.user_id });
        //         console.log("Id in Invoice: ", id);
        //         // //find order details
        //         const orderData = await Order.findById(id);
        //         console.log("orderData >>", orderData);
        
        //         // // Generate the PDF
        //         const doc = new PDFDocument();
        //         doc.pipe(fs.createWriteStream('invoice.pdf'));
        
        //         // // Add content to the PDF
        
        //         // Set font and styles
        //         doc.fontSize(12);
        //         const leftAlign = { align: 'left' };
        //         const rightAlign = { align: 'right' };
        
        //         // Title
        //         doc.fontSize(15).text('Stepify Invoice', { align: 'center' });
        //         doc.fontSize(12).text('Invoice', { align: 'center' });
        //         doc.text('--------------------------');
        
        //         // Order ID and Order Date
        //         doc.text(`Order Id: ${orderData._id}`, leftAlign);
        //         doc.text(`Order Date: ${orderData.createdAt.toISOString().split('T')[0]}`, rightAlign);
        //         doc.text('--------------------------');
        
        //         // Seller and Customer Details
        //         doc.text('Seller Details', leftAlign);
        //         doc.text('Customer Details', rightAlign);
        //         doc.text(`Name (Seller): Your Company Name`, leftAlign);
        //         doc.text(`Name (Customer): ${userData.firstName}`, rightAlign);
        //         doc.text(`Phone (Seller): Your Phone Number`, leftAlign);
        //         doc.text(`Phone (Customer): ${orderData.userMobile}`, rightAlign);
        //         doc.text(`Delivery Address (Seller): Your Address`, leftAlign);
        //         doc.text(`Delivery Address (Customer): ${orderData.deliveryAddress}`, rightAlign);
        
        //         // Table Header
        //         doc.text('Product', { width: 200, continued: true }, leftAlign);
        //         doc.text('Quantity', { width: 60, continued: true }, leftAlign);
        //         doc.text('Price', { width: 80, continued: true }, leftAlign);
        //         doc.text('Total', { width: 80, continued: true }, leftAlign);
        
        //         // Products
        //         // orderData.items.forEach((document) => {
        //         //     doc.text(document.ProductId, { width: 200, continued: true }, leftAlign);
        //         //     doc.text(document.quantity.toString(), { width: 60, continued: true }, leftAlign);
        //         //     doc.text(`${document.price.toFixed(2)}`, { width: 80, continued: true }, leftAlign);
        //         //     doc.text(`${(document.quantity).toFixed(2)}`, leftAlign);
        //         // });
        
        //         // Total Amount
        //         // const totalAmount = orderData.items.reduce((acc, item) => {
        //         //     const itemPrice = parseFloat(item.price);
        //         //     const itemQuantity = parseInt(item.quantity);
        
        //         //     // Check if itemPrice and itemQuantity are valid numbers
        //         //     if (!isNaN(itemPrice) && !isNaN(itemQuantity)) {
        //         //         return acc + itemQuantity * itemPrice;
        //         //     } else {
        //         //         console.log(`Invalid item data: ${item.ProductId}`);
        //         //         return acc;
        //         //     }
        //         // }, 0);
        
        //         // Check if totalAmount is a valid number
        //         //   if (!isNaN(totalAmount)) {
        //         //     doc.text(`Total Amount : $${totalAmount.toFixed(2)}`, leftAlign);
        //         //   } else {
        //         //     console.log("Invalid total amount calculation.");
        //         //   }
        
        //         // // Stream the PDF to the response
        //         const filename = 'Invoice.pdf';
        //         res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
        //         res.setHeader('Content-Type', 'application/pdf');
        //         doc.pipe(res);
        //         doc.end();
        //     } catch (err) {
        //         console.log("in invoice >> ", err.message);
        //     }
        // }
        
    


        <div class="mt-5">
            <section class="balance">
                <h2>Your Wallet Balance</h2>
                <p>Balance:</p>
            </section>
            
            <section class="transactions">
                <h2>Transaction History</h2>
                <table>
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Type</th>
                            <th>Amount</th>
                        </tr>
                    </thead>
            
                </table>
            </section>
            
            <section class="actions">
                <h2>Wallet Actions</h2>
                <form method="POST" action="/deposit">
                    <label for="depositAmount">Deposit Amount:</label>
                    <input type="number" id="depositAmount" name="depositAmount" required>
                    <button type="submit">Deposit</button>
                </form>
            
                <form method="POST" action="/withdraw">
                    <label for="withdrawAmount">Withdraw Amount:</label>
                    <input type="number" id="withdrawAmount" name="withdrawAmount" required>
                    <button type="submit">Withdraw</button>
                </form>
            </section>
        </div>